package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"time"

	"github.com/parnurzeal/gorequest"
)

var kgsapiurl = "https://www.gokgs.com/json/access"

type kgscredentials struct {
	Type     string `json:"type"`
	Name     string `json:"name"`
	Password string `json:"password"`
	Locale   string `json:"locale"`
}

type AutoGenerated struct {
	Messages []struct {
		VersionBugfix   int    `json:"versionBugfix,omitempty"`
		Type            string `json:"type"`
		VersionMajor    int    `json:"versionMajor,omitempty"`
		VersionMinor    int    `json:"versionMinor,omitempty"`
		JSONClientBuild string `json:"jsonClientBuild,omitempty"`
		Subscriptions   []struct {
			Start time.Time `json:"start"`
			End   time.Time `json:"end"`
		} `json:"subscriptions,omitempty"`
		Rooms []struct {
			Category  string `json:"category"`
			ChannelID int    `json:"channelId"`
		} `json:"rooms,omitempty"`
		RoomCategoryChannelIds struct {
			NATIONAL   int `json:"NATIONAL"`
			TOURNAMENT int `json:"TOURNAMENT"`
			FRIENDLY   int `json:"FRIENDLY"`
			TEMPORARY  int `json:"TEMPORARY"`
			MAIN       int `json:"MAIN"`
			LESSONS    int `json:"LESSONS"`
			CLUBS      int `json:"CLUBS"`
		} `json:"roomCategoryChannelIds,omitempty"`
		You struct {
			Name  string `json:"name"`
			Flags string `json:"flags"`
		} `json:"you,omitempty"`
		Friends []struct {
			FriendType string `json:"friendType"`
			User       struct {
				Name  string `json:"name"`
				Flags string `json:"flags"`
				Rank  string `json:"rank"`
			} `json:"user"`
		} `json:"friends,omitempty"`
		Description string `json:"description,omitempty"`
		Owners      []struct {
			Name      string `json:"name"`
			Flags     string `json:"flags"`
			Rank      string `json:"rank,omitempty"`
			AuthLevel string `json:"authLevel"`
		} `json:"owners,omitempty"`
		ChannelID int `json:"channelId,omitempty"`
		Games     []struct {
			GameType string  `json:"gameType"`
			Komi     float64 `json:"komi"`
			Size     int     `json:"size"`
			Saved    bool    `json:"saved"`
			Handicap int     `json:"handicap"`
			Players  struct {
				White struct {
					Name  string `json:"name"`
					Flags string `json:"flags"`
					Rank  string `json:"rank"`
				} `json:"white"`
				Black struct {
					Name  string `json:"name"`
					Flags string `json:"flags"`
					Rank  string `json:"rank"`
				} `json:"black"`
			} `json:"players"`
			MoveNum   int    `json:"moveNum"`
			Global    bool   `json:"global,omitempty"`
			ChannelID int    `json:"channelId"`
			RoomID    int    `json:"roomId"`
			Private   bool   `json:"private,omitempty"`
			Observers int    `json:"observers,omitempty"`
			Over      bool   `json:"over,omitempty"`
			Score     string `json:"score,omitempty"`
		} `json:"games,omitempty"`
		Users []struct {
			Name      string `json:"name"`
			Flags     string `json:"flags"`
			Rank      string `json:"rank,omitempty"`
			AuthLevel string `json:"authLevel,omitempty"`
		} `json:"users,omitempty"`
		EstimatedRank string `json:"estimatedRank,omitempty"`
		FastOk        bool   `json:"fastOk,omitempty"`
		UnrankedOk    bool   `json:"unrankedOk,omitempty"`
		HumanOk       bool   `json:"humanOk,omitempty"`
		MediumOk      bool   `json:"mediumOk,omitempty"`
		MaxHandicap   int    `json:"maxHandicap,omitempty"`
		FreeOk        bool   `json:"freeOk,omitempty"`
		RankedOk      bool   `json:"rankedOk,omitempty"`
		BlitzOk       bool   `json:"blitzOk,omitempty"`
		RobotOk       bool   `json:"robotOk,omitempty"`
		Playbacks     []struct {
			SubscribersOnly bool      `json:"subscribersOnly"`
			DateStamp       time.Time `json:"dateStamp"`
			GameSummary     struct {
				GameType string  `json:"gameType"`
				Score    string  `json:"score"`
				Komi     float64 `json:"komi"`
				Size     int     `json:"size"`
				Players  struct {
					Owner struct {
						Name  string `json:"name"`
						Flags string `json:"flags"`
						Rank  string `json:"rank"`
					} `json:"owner"`
				} `json:"players"`
				Handicap  int       `json:"handicap"`
				Timestamp time.Time `json:"timestamp"`
			} `json:"gameSummary"`
		} `json:"playbacks,omitempty"`
	} `json:"messages"`
}

var myClient = &http.Client{Timeout: 10 * time.Second}

func getJSON(url string, target interface{}) error {
	r, err := myClient.Get(url)
	if err != nil {
		return err
	}
	defer r.Body.Close()
	return json.NewDecoder(r.Body).Decode(target)
}

func kgsLogin() int {

	// Define credentials
	login := &kgscredentials{
		Type:     "LOGIN",
		Name:     "ggoban",
		Password: "jason",
		Locale:   "en_US",
	}
	// Initiate connection
	request := gorequest.New()
	resp, body, errs := request.Post(kgsapiurl).Send(login).End()
	if errs != nil {
		fmt.Println(errs)
		os.Exit(1)
	}
	fmt.Println("Login Status:", body)
	return resp.StatusCode
}

func kgsPoll() {
	if kgsLogin() == 200 {
		request := gorequest.New()
		resp, body, errs := request.Get(kgsapiurl).End()
		if errs != nil {
			fmt.Println(errs)
			os.Exit(1)
		}
		fmt.Println("Poll Status:", resp.Status)
		fmt.Println("Poll Headers:", resp.Header)
		fmt.Println("Poll Body:", body)

	} else {
		fmt.Println("Disconnected or Errored out")
		kgsLogin()
	}
}
